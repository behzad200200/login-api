angular.module('myApp.profile', ['ngRoute'])
.config([
            '$routeProvider'
            ($routeProvider)->
                $routeProvider.when('/new_profile',
                    templateUrl: '<%= asset_path('users/new_profile.html') %>'
                    controller: 'NewProfileController'
                    resolve:
                        auth:['$auth', ($auth)->
                            $auth.validateUser()
                        ]
                )
                .when('/edit_profile',
                    templateUrl: '<%= asset_path('users/edit_profile.html') %>'
                    controller: 'EditProfileController'
                    resolve:
                        auth:['$auth','contractorService', ($auth, contractorService)->
                            $auth.validateUser()
                        ]
                )
                .when('/show_profile',
                    templateUrl: '<%= asset_path('users/show_profile.html.erb') %>'
                    controller: 'ShowProfileController'
                    resolve:
                        contractor: ['$auth','contractorService','$rootScope', ($auth,contractorService)->
                            return $auth.validateUser().then((user)->
                                    console.log(user.id)
                                    contractorService.checkContractor(user);
                            )
                        ]
                )
        ])
.controller('NewProfileController', [
            '$auth'
            '$scope'
            '$location',
            'contractorService'
            ($auth, $scope, $location, contractorService)->
                $scope.contractor = contractorService.newContractor()
                $scope.createProfile = (contractor)->

                    contractorService.setNewContractor($scope.contractor, $scope.user)
                $scope.$on('auth:logout-success',
                ->
                    $location.path('/login')
                )
        ])
.controller('EditProfileController',[
            '$scope',
            'contractorService',
            '$location',
            'State'
            ($scope, contractorService, $location, State)->
                job =
                    id: ''
                    title: 'Ruby On Rails'
                    start_date: '2015-04-06'
                    end_date: '2015-02-06'

                $scope.contractor = {}
                contractorService.checkContractor($scope.user)
                .success((resp)->
                    $scope.contractor = resp
                    $scope.states = State.getStates($scope.contractor)
                    $scope
                    $scope.contractor.job_roles_attributes = [] if !$scope.contractor.job_roles_attributes?
                )
                .error((resp)->
                    $location.path('/new_profile')
                )

                $scope.updateProfile = (contractor)->
                    selectedStates = State.statesToArray($scope.states)
                    contractor.states = selectedStates
                    contractorService.updateContractor(contractor)
                    .success((resp)->
                        $location.path('/profile')
                    )

                $scope.addJobTitle = ->
                    temp = JSON.parse(JSON.stringify(job))
                    $scope.contractor.job_roles_attributes.push(temp)
        ])
.controller('ShowProfileController',[
            '$scope'
            'contractor'
            ($scope, contractor)->
                $scope.contractor = contractor.data
                console.log($scope.contractor)
        ])
.factory('contractorService', [
            '$http',
            ($http)->
                newContractor = ->
                    contractor={}
                    http={
                        url: 'api/contractors/new'
                        method: 'GET'
                    }
                    $http(http)
                    .success((resp)->
                        contractor = resp
                    )
                    .error((resp)->

                    )
                    contractor
                setNewContractor = (contractor, user)->
                    $http(
                        url: 'api/contractors'
                        method: 'post'
                        data:
                            contractor: contractor
                            user_id: user.id
                    ).success((resp)->

                    )
                checkContractor = (user)->
                    http={
                        url: "api/contractor"
                        method: 'get'
                        params:
                            user_id: user.id
                    }
                    $http(http)
                updateContractor = (contractor)->
                    $http(
                        url: "api/contractors/#{contractor.id}"
                        method: 'put'
                        data:
                            contractor: contractor
                    )
                newContractor: newContractor
                setNewContractor: setNewContractor
                checkContractor: checkContractor
                updateContractor: updateContractor
        ])

.factory('State',[
            'STATE'
            (STATE)->
                State = {}
                State.getStates = (contractor)->
                    STATE.map (value) ->
                        if value in contractor.states
                            name: value
                            ticked: true
                        else
                            name: value
                State.statesToArray = (states)->
                    aStates = []
                    aStates.push state.name for state in states when state.ticked == true
                    aStates
                State
        ])


